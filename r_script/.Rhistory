mutate(language = factor(language, levels = c("de", "en", "fr", "it", "vi", "th", "zh", "yue", "ja", "sv", "sr", "kor"), labels = c("De", "En", "Fr", "It", "Vi", "Th", "Zh-CN", "Yue", "Ja", "Sv", "Sr", "Kor"))) %>%
filter(language != "Sr") %>%
pivot_longer(cols = c(prop_mis_0, prop_mis_1, prop_mis_2, prop_mis_3),
names_to = "mis_type", values_to = "prop_mis") %>%
pivot_longer(cols = c(mi_0, mi_1, mi_2, mi_3),
names_to = "mi_type", values_to = "mi_value") %>%
filter(gsub("prop_mis_", "", mis_type) == gsub("mi_", "", mi_type))
color_palette <- brewer.pal(n = min(12, length(unique(mi_alg_mbert$language))), name = "Paired")
# color_palette <- brewer.pal(n = min(11, length(unique(mi_alg$language))), name = "Spectral")
ggplot(mi_alg_mbert, aes(x = prop_mis, y = mi_value, color = language, group = language)) +
geom_line(size = 1) +
geom_point(size = 1.5, shape = 21, fill = "white") +
labs(x = "Proportion of Misalignment",
y = "Estimated Mutual Information (MI)",
title = "Mutual Information vs Misalignment (mBERT)",
color = "Language") +
scale_color_manual(values = color_palette) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black", size = 0.5) +
theme_minimal(base_size = 15) +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5, face = "bold", size = 15),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13, face = "bold"),
panel.border = element_rect(color = "black", fill = NA, size = 0.5))
# ggsave(filename = paste0("./visualization/mi_misalignment_mbert", ".pdf"), width = 6, height = 5, dpi=300)
mi_alg_mgpt <- read.csv("./mi_alignment.csv", header=TRUE) %>%
filter(model == "mgpt") %>%
rename(prop_mis_0 = prop_mis_orig,
language = lang) %>%
mutate(language = factor(language, levels = c("de", "en", "fr", "it", "vi", "th", "zh", "yue", "ja", "sv", "sr", "kor"), labels = c("De", "En", "Fr", "It", "Vi", "Th", "Zh-CN", "Yue", "Ja", "Sv", "Sr", "Kor"))) %>%
filter(language != "Sr") %>%
pivot_longer(cols = c(prop_mis_0, prop_mis_1, prop_mis_2, prop_mis_3),
names_to = "mis_type", values_to = "prop_mis") %>%
pivot_longer(cols = c(mi_0, mi_1, mi_2, mi_3),
names_to = "mi_type", values_to = "mi_value") %>%
filter(gsub("prop_mis_", "", mis_type) == gsub("mi_", "", mi_type))
ggplot(mi_alg_mgpt, aes(x = prop_mis, y = mi_value, color = language, group = language)) +
geom_line(size = 1) +
geom_point(size = 1.5, shape = 21, fill = "white") +
labs(x = "Proportion of Misalignment",
y = "Estimated Mutual Information (MI)",
title = "Mutual Information vs Misalignment (mGPT)",
color = "Language") +
scale_color_manual(values = color_palette) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black", size = 0.5) +
theme_minimal(base_size = 15) +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5, face = "bold", size = 15),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13, face = "bold"),
panel.border = element_rect(color = "black", fill = NA, size = 0.5))
ggsave(filename = paste0("./visualization/mi_misalignment_mgpt", ".pdf"), width = 6, height = 5, dpi=300)
mi_token_mbert <- read.csv("./mi_token_mbert.csv", header=TRUE) %>%
filter(model == "mbert") %>%
rename(prop_token_1 = token_1_prop,
prop_token_2 = token_2_prop,
prop_token_3 = token_3_prop) %>%
mutate(language = factor(language, levels = c("de", "en", "fr", "it", "vi", "th", "zh", "yue", "ja", "sv", "sr", "kor"), labels = c("De", "En", "Fr", "It", "Vi", "Th", "Zh-CN", "Yue", "Ja", "Sv", "Sr", "Kor"))) %>%
filter(language != "Sr") %>%
pivot_longer(cols = c(prop_token_1, prop_token_2, prop_token_3),
names_to = "prop_token_type", values_to = "prop") %>%
pivot_longer(cols = c(loss_token_1, loss_token_2, loss_token_3),
names_to = "loss_token_type", values_to = "loss") #%>%
# filter(gsub("prop_mis_", "", mis_type) == gsub("mi_", "", mi_type))
# colnames(mi_token_mbert)
View(mi_token_mbert)
mi_token_mbert <- read.csv("./mi_token_mbert.csv", header=TRUE) %>%
filter(model == "mbert") %>%
rename(prop_token_1 = token_1_prop,
prop_token_2 = token_2_prop,
prop_token_3 = token_3_prop) %>%
mutate(language = factor(language, levels = c("de", "en", "fr", "it", "vi", "th", "zh", "yue", "ja", "sv", "sr", "kor"), labels = c("De", "En", "Fr", "It", "Vi", "Th", "Zh-CN", "Yue", "Ja", "Sv", "Sr", "Kor"))) %>%
filter(language != "Sr") %>%
pivot_longer(cols = c(prop_token_1, prop_token_2, prop_token_3),
names_to = "prop_token_type", values_to = "prop") %>%
pivot_longer(cols = c(loss_token_1, loss_token_2, loss_token_3),
names_to = "loss_token_type", values_to = "loss") %>%
filter(gsub("prop_token_", "", prop_token_type) == gsub("loss_token_", "", loss_token_type))
# colnames(mi_token_mbert)
View(mi_token_mbert)
mi_token_mbert <- read.csv("./mi_token_mbert.csv", header=TRUE) %>%
filter(model == "mbert") %>%
rename(prop_token_1 = token_1_prop,
prop_token_2 = token_2_prop,
prop_token_3 = token_3_prop) %>%
mutate(language = factor(language, levels = c("de", "en", "fr", "it", "vi", "th", "zh", "yue", "ja", "sv", "sr", "kor"), labels = c("De", "En", "Fr", "It", "Vi", "Th", "Zh-CN", "Yue", "Ja", "Sv", "Sr", "Kor"))) %>%
filter(language != "Sr") %>%
pivot_longer(cols = c(prop_token_1, prop_token_2, prop_token_3),
names_to = "prop_token_type", values_to = "prop") %>%
pivot_longer(cols = c(loss_token_1, loss_token_2, loss_token_3),
names_to = "loss_token_type", values_to = "loss") %>%
filter(gsub("prop_token_", "", prop_token_type) == gsub("loss_token_", "", loss_token_type)) %>%
dplyr::select(-loss_token_type) %>%
rename(token_type = prop_token_type)
# colnames(mi_token_mbert)
View(mi_token_mbert)
mi_token_mbert <- read.csv("./mi_token_mbert.csv", header=TRUE) %>%
filter(model == "mbert") %>%
rename(token_1 = token_1_prop,
token_2 = token_2_prop,
token_3 = token_3_prop) %>%
mutate(language = factor(language, levels = c("de", "en", "fr", "it", "vi", "th", "zh", "yue", "ja", "sv", "sr", "kor"), labels = c("De", "En", "Fr", "It", "Vi", "Th", "Zh-CN", "Yue", "Ja", "Sv", "Sr", "Kor"))) %>%
filter(language != "Sr") %>%
pivot_longer(cols = c(token_1, token_2, token_3),
names_to = "token_type", values_to = "prop") %>%
pivot_longer(cols = c(loss_token_1, loss_token_2, loss_token_3),
names_to = "loss_token_type", values_to = "loss") %>%
filter(gsub("token_", "", prop_token_type) == gsub("loss_token_", "", loss_token_type)) %>%
dplyr::select(-loss_token_type)
mi_token_mbert <- read.csv("./mi_token_mbert.csv", header=TRUE) %>%
filter(model == "mbert") %>%
rename(token_1 = token_1_prop,
token_2 = token_2_prop,
token_3 = token_3_prop) %>%
mutate(language = factor(language, levels = c("de", "en", "fr", "it", "vi", "th", "zh", "yue", "ja", "sv", "sr", "kor"), labels = c("De", "En", "Fr", "It", "Vi", "Th", "Zh-CN", "Yue", "Ja", "Sv", "Sr", "Kor"))) %>%
filter(language != "Sr") %>%
pivot_longer(cols = c(token_1, token_2, token_3),
names_to = "token_type", values_to = "prop") %>%
pivot_longer(cols = c(loss_token_1, loss_token_2, loss_token_3),
names_to = "loss_token_type", values_to = "loss") %>%
filter(gsub("token_", "", token_type) == gsub("loss_token_", "", loss_token_type)) %>%
dplyr::select(-loss_token_type)
# colnames(mi_token_mbert)
View(mi_token_mbert)
mi_token_mbert <- read.csv("./mi_token_mbert.csv", header=TRUE) %>%
filter(model == "mbert") %>%
rename(token_1 = token_1_prop,
token_2 = token_2_prop,
token_3 = token_3_prop) %>%
mutate(language = factor(language, levels = c("de", "en", "fr", "it", "vi", "th", "zh", "yue", "ja", "sv", "sr", "kor"), labels = c("De", "En", "Fr", "It", "Vi", "Th", "Zh-CN", "Yue", "Ja", "Sv", "Sr", "Kor"))) %>%
filter(language != "Sr") %>%
pivot_longer(cols = c(token_1, token_2, token_3),
names_to = "token_type", values_to = "prop") %>%
pivot_longer(cols = c(loss_token_1, loss_token_2, loss_token_3),
names_to = "loss_token_type", values_to = "loss") %>%
filter(gsub("token_", "", token_type) == gsub("loss_token_", "", loss_token_type)) %>%
dplyr::select(-loss_token_type) %>%
mutate(token_type = factor(token_type, levels = c("token_1", "token_2", "token_3"),
labels = c("1", "2", "3+")))
# colnames(mi_token_mbert)
View(mi_token_mbert)
ggplot(mi_token_mbert, aes(x = token_type, y = loss, color = language, group = language)) +
geom_line(size = 1) +
geom_point(size = 1.5, shape = 21, fill = "white") +
labs(x = "Number of sub-tokens of a word",
y = "Estimated Conditional Entropy",
title = "Conditional Entropy vs Tokenization (mBERT)",
color = "Language") +
scale_color_manual(values = color_palette) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black", size = 0.5) +
theme_minimal(base_size = 15) +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5, face = "bold", size = 15),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13, face = "bold"),
panel.border = element_rect(color = "black", fill = NA, size = 0.5))
# ggsave(filename = paste0("./visualization/cond_ent_tokenization_mbert", ".pdf"), width = 6, height = 5, dpi=300)
ggplot(mi_token_mbert, aes(x = token_type, y = loss, color = language, group = language)) +
geom_line(size = 1) +
geom_point(size = 1.5, shape = 21, fill = "white") +
labs(x = "Number of sub-tokens of a word",
y = "Estimated Conditional Entropy",
title = "Conditional Entropy vs Tokenization (mBERT)",
color = "Language") +
scale_color_manual(values = color_palette) +
# geom_hline(yintercept = 0, linetype = "dashed", color = "black", size = 0.5) +
theme_minimal(base_size = 15) +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5, face = "bold", size = 15),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13, face = "bold"),
panel.border = element_rect(color = "black", fill = NA, size = 0.5))
# ggsave(filename = paste0("./visualization/cond_ent_tokenization_mbert", ".pdf"), width = 6, height = 5, dpi=300)
ggplot(mi_token_mbert, aes(x = token_type, y = loss, color = language, group = language)) +
geom_line(size = 1) +
geom_point(size = 1.5, shape = 21, fill = "white") +
labs(x = "Number of sub-tokens of a word in test dataset",
y = "Estimated Conditional Entropy",
title = "Conditional Entropy vs Tokenization (mBERT)",
color = "Language") +
scale_color_manual(values = color_palette) +
# geom_hline(yintercept = 0, linetype = "dashed", color = "black", size = 0.5) +
theme_minimal(base_size = 15) +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5, face = "bold", size = 15),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13, face = "bold"),
panel.border = element_rect(color = "black", fill = NA, size = 0.5))
# ggsave(filename = paste0("./visualization/cond_ent_tokenization_mbert", ".pdf"), width = 6, height = 5, dpi=300)
ggplot(mi_token_mbert, aes(x = token_type, y = loss, color = language, group = language)) +
geom_line(size = 1) +
geom_point(size = 1.5, shape = 21, fill = "white") +
labs(x = "Number of sub-tokens of a word in test dataset",
y = "Estimated Conditional Entropy",
title = "Conditional Entropy vs Tokenization (mBERT)",
color = "Language") +
scale_color_manual(values = color_palette) +
# geom_hline(yintercept = 0, linetype = "dashed", color = "black", size = 0.5) +
theme_minimal(base_size = 15) +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5, face = "bold", size = 15),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13, face = "bold"),
# panel.border = element_rect(color = "black", fill = NA, size = 0.5)
)
# ggsave(filename = paste0("./visualization/cond_ent_tokenization_mbert", ".pdf"), width = 6, height = 5, dpi=300)
ggplot(mi_token_mbert, aes(x = token_type, y = loss, color = language, group = language)) +
geom_line(size = 1) +
geom_point(size = 1.5, shape = 21, fill = "white") +
labs(x = "Number of sub-tokens of a word in test dataset",
y = "Estimated Conditional Entropy",
title = "Conditional Entropy vs Tokenization (mBERT)",
color = "Language") +
scale_color_manual(values = color_palette) +
scale_x_continuous(limits = c(1, NA)) +
# geom_hline(yintercept = 0, linetype = "dashed", color = "black", size = 0.5) +
theme_minimal(base_size = 15) +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5, face = "bold", size = 15),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13, face = "bold"),
# panel.border = element_rect(color = "black", fill = NA, size = 0.5)
)
ggplot(mi_token_mbert, aes(x = token_type, y = loss, color = language, group = language)) +
geom_line(size = 1) +
geom_point(size = 1.5, shape = 21, fill = "white") +
labs(x = "Number of sub-tokens of a word in test dataset",
y = "Estimated Conditional Entropy",
title = "Conditional Entropy vs Tokenization (mBERT)",
color = "Language") +
scale_color_manual(values = color_palette) +
scale_x_discrete(limits = as.character(1:max(mi_token_mbert$token_type))) +
# geom_hline(yintercept = 0, linetype = "dashed", color = "black", size = 0.5) +
theme_minimal(base_size = 15) +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5, face = "bold", size = 15),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13, face = "bold"),
# panel.border = element_rect(color = "black", fill = NA, size = 0.5)
)
ggplot(mi_token_mbert, aes(x = token_type, y = loss, color = language, group = language)) +
geom_line(size = 1) +
geom_point(size = 1.5, shape = 21, fill = "white") +
labs(x = "Number of sub-tokens of a word in test dataset",
y = "Estimated Conditional Entropy",
title = "Conditional Entropy vs Tokenization (mBERT)",
color = "Language") +
scale_color_manual(values = color_palette) +
scale_x_discrete(limits = as.character(1:4))) +
ggplot(mi_token_mbert, aes(x = token_type, y = loss, color = language, group = language)) +
geom_line(size = 1) +
geom_point(size = 1.5, shape = 21, fill = "white") +
labs(x = "Number of sub-tokens of a word in test dataset",
y = "Estimated Conditional Entropy",
title = "Conditional Entropy vs Tokenization (mBERT)",
color = "Language") +
scale_color_manual(values = color_palette) +
scale_x_discrete(limits = as.character(1:4)) +
# geom_hline(yintercept = 0, linetype = "dashed", color = "black", size = 0.5) +
theme_minimal(base_size = 15) +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5, face = "bold", size = 15),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13, face = "bold"),
# panel.border = element_rect(color = "black", fill = NA, size = 0.5)
)
ggsave(filename = paste0("./visualization/cond_ent_tokenization_mbert", ".pdf"), width = 6, height = 5, dpi=300)
ggplot(mi_token_mbert, aes(x = token_type, y = loss, color = language, group = language)) +
geom_line(size = 1) +
geom_point(size = 1.5, shape = 21, fill = "white") +
labs(x = "Number of sub-tokens of a word in test dataset",
y = "Estimated Conditional Entropy",
title = "Conditional Entropy vs Tokenization (mBERT)",
color = "Language") +
scale_color_manual(values = color_palette) +
# geom_hline(yintercept = 0, linetype = "dashed", color = "black", size = 0.5) +
theme_minimal(base_size = 15) +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5, face = "bold", size = 15),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13, face = "bold"),
# panel.border = element_rect(color = "black", fill = NA, size = 0.5)
)
ggsave(filename = paste0("./visualization/cond_ent_tokenization_mbert", ".pdf"), width = 6, height = 5, dpi=300)
ggplot(mi_token_mbert, aes(x = token_type, y = prop, color = language, group = language)) +
geom_line(size = 1) +
geom_point(size = 1.5, shape = 21, fill = "white") +
labs(x = "Number of sub-tokens of a word in test dataset",
y = "Estimated Conditional Entropy",
title = "Conditional Entropy vs Tokenization (mBERT)",
color = "Language") +
scale_color_manual(values = color_palette) +
# geom_hline(yintercept = 0, linetype = "dashed", color = "black", size = 0.5) +
theme_minimal(base_size = 15) +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5, face = "bold", size = 15),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13, face = "bold"),
# panel.border = element_rect(color = "black", fill = NA, size = 0.5)
)
ggplot(mi_token_mbert, aes(x = token_type, y = prop, color = language, group = language)) +
geom_line(size = 1) +
geom_point(size = 1.5, shape = 21, fill = "white") +
labs(x = "Number of sub-tokens of a word in test dataset",
y = "Propotion",
title = "Propotion of different tokenization results (mBERT)",
color = "Language") +
scale_color_manual(values = color_palette) +
# geom_hline(yintercept = 0, linetype = "dashed", color = "black", size = 0.5) +
theme_minimal(base_size = 15) +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5, face = "bold", size = 15),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13, face = "bold"),
# panel.border = element_rect(color = "black", fill = NA, size = 0.5)
)
ggsave(filename = paste0("./visualization/propotion_tokenization_mbert", ".pdf"), width = 6, height = 5, dpi=300)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(colorspace)
library(lme4)
library(lmerTest)
library(MASS)
library(RColorBrewer)
ent_mi <- read.csv("./results/results.csv", header=TRUE) %>%
mutate(language = factor(language, levels = c("De", "En", "Fr", "It", "Vi", "Th", "Zh-CN", "Yue", "Ja", "Sv", "Sr", "Kor")))
# View(ent_mi)
mi <- subset(ent_mi, entropy == "Conditional Entropy")
ggplot(mi, aes(x = language, y = MI, fill = model)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black", width = 0.7) +
geom_text(aes(label = round(MI, 2)),
vjust = 0.5,
position = position_dodge(width = 0.7),
size = 3,
angle = 90,
hjust = -0.2) +
labs(x = "Language",
y = expression(bold("Mutual Information") ~ "(nats)"),
fill = "Context types:") +
theme_minimal(base_size = 14) +
scale_fill_manual(values = c("mBERT" = "#1b9e77", "mGPT" = "#d95f02"),
labels = c("mBERT" = "Bidirectional context (mBERT)", "mGPT" = "Past context (mGPT)")) +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, face = "bold"),
axis.title = element_text(face = "bold"),
legend.title = element_text(),
legend.position = "top") +
ylim(0, 4) +
# Annotate regions and text
annotate("rect", xmin = 0.6, xmax = 4.4, ymin = 0, ymax = 3,
fill = NA, color = "#6a5acd", linetype = "dotted", size = 1) +  # Changed to soft purple
annotate("text", x = 2.5, y = 2.5, label = "stress-accent", color = "#6a5acd", size = 4) +
annotate("rect", xmin = 4.6, xmax = 8.4, ymin = 0, ymax = 3,
fill = NA, color = "#4682b4", size = 1) +  # Changed to steel blue
annotate("text", x = 6.5, y = 2.5, label = "tonal-accent", color = "#4682b4", size = 4) +   blue
library(ggplot2)
library(tidyverse)
library(dplyr)
library(colorspace)
library(lme4)
library(lmerTest)
library(MASS)
library(RColorBrewer)
ent_mi <- read.csv("./results/results.csv", header=TRUE) %>%
mutate(language = factor(language, levels = c("De", "En", "Fr", "It", "Vi", "Th", "Zh-CN", "Yue", "Ja", "Sv", "Sr", "Kor")))
# View(ent_mi)
mi <- subset(ent_mi, entropy == "Conditional Entropy")
ggplot(mi, aes(x = language, y = MI, fill = model)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black", width = 0.7) +
geom_text(aes(label = round(MI, 2)),
vjust = 0.5,
position = position_dodge(width = 0.7),
size = 3,
angle = 90,
hjust = -0.2) +
labs(x = "Language",
y = expression(bold("Mutual Information") ~ "(nats)"),
fill = "Context types:") +
theme_minimal(base_size = 14) +
scale_fill_manual(values = c("mBERT" = "#1b9e77", "mGPT" = "#d95f02"),
labels = c("mBERT" = "Bidirectional context (mBERT)", "mGPT" = "Past context (mGPT)")) +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, face = "bold"),
axis.title = element_text(face = "bold"),
legend.title = element_text(),
legend.position = "top") +
ylim(0, 4) +
# Annotate regions and text
annotate("rect", xmin = 0.6, xmax = 4.4, ymin = 0, ymax = 3,
fill = NA, color = "#6a5acd", linetype = "dotted", size = 1) +  # Changed to soft purple
annotate("text", x = 2.5, y = 2.5, label = "stress-accent", color = "#6a5acd", size = 4) +
annotate("rect", xmin = 4.6, xmax = 8.4, ymin = 0, ymax = 3,
fill = NA, color = "#4682b4", size = 1) +  # Changed to steel blue
annotate("text", x = 6.5, y = 2.5, label = "tonal-accent", color = "#4682b4", size = 4) +   blue
setwd("~/Documents/uzh/PhD/Projects/Prosody/crosslingual-redundancy/r_script")
library(ggplot2)
library(tidyverse)
library(dplyr)
library(colorspace)
library(lme4)
library(lmerTest)
library(MASS)
library(RColorBrewer)
ent_mi <- read.csv("./results/results.csv", header=TRUE) %>%
mutate(language = factor(language, levels = c("De", "En", "Fr", "It", "Vi", "Th", "Zh-CN", "Yue", "Ja", "Sv", "Sr", "Kor")))
# View(ent_mi)
mi <- subset(ent_mi, entropy == "Conditional Entropy")
ggplot(mi, aes(x = language, y = MI, fill = model)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black", width = 0.7) +
geom_text(aes(label = round(MI, 2)),
vjust = 0.5,
position = position_dodge(width = 0.7),
size = 3,
angle = 90,
hjust = -0.2) +
labs(x = "Language",
y = expression(bold("Mutual Information") ~ "(nats)"),
fill = "Context types:") +
theme_minimal(base_size = 14) +
scale_fill_manual(values = c("mBERT" = "#1b9e77", "mGPT" = "#d95f02"),
labels = c("mBERT" = "Bidirectional context (mBERT)", "mGPT" = "Past context (mGPT)")) +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, face = "bold"),
axis.title = element_text(face = "bold"),
legend.title = element_text(),
legend.position = "top") +
ylim(0, 4) +
# Annotate regions and text
annotate("rect", xmin = 0.6, xmax = 4.4, ymin = 0, ymax = 3,
fill = NA, color = "#6a5acd", linetype = "dotted", size = 1) +  # Changed to soft purple
annotate("text", x = 2.5, y = 2.5, label = "stress-accent", color = "#6a5acd", size = 4) +
annotate("rect", xmin = 4.6, xmax = 8.4, ymin = 0, ymax = 3,
fill = NA, color = "#4682b4", size = 1) +  # Changed to steel blue
annotate("text", x = 6.5, y = 2.5, label = "tonal-accent", color = "#4682b4", size = 4) +   blue
mi <- subset(ent_mi, entropy == "Conditional Entropy")
ggplot(mi, aes(x = language, y = MI, fill = model)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black", width = 0.7) +
geom_text(aes(label = round(MI, 2)),
vjust = 0.5,
position = position_dodge(width = 0.7),
size = 3,
angle = 90,
hjust = -0.2) +
labs(x = "Language",
y = expression(bold("Mutual Information") ~ "(nats)"),
fill = "Context types:") +
theme_minimal(base_size = 14) +
scale_fill_manual(values = c("mBERT" = "#1b9e77", "mGPT" = "#d95f02"),
labels = c("mBERT" = "Bidirectional context (mBERT)", "mGPT" = "Past context (mGPT)")) +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, face = "bold"),
axis.title = element_text(face = "bold"),
legend.title = element_text(),
legend.position = "top") +
ylim(0, 4) +
# Annotate regions and text
annotate("rect", xmin = 0.6, xmax = 4.4, ymin = 0, ymax = 3,
fill = NA, color = "#6a5acd", linetype = "dotted", size = 1) +  # Changed to soft purple
annotate("text", x = 2.5, y = 2.5, label = "stress-accent", color = "#6a5acd", size = 4) +
annotate("rect", xmin = 4.6, xmax = 8.4, ymin = 0, ymax = 3,
fill = NA, color = "#4682b4", size = 1) +  # Changed to steel blue
annotate("text", x = 6.5, y = 2.5, label = "tonal-accent", color = "#4682b4", size = 4) +   blue
ent_mi <- read.csv("./results/results.csv", header=TRUE) %>%
mutate(language = factor(language, levels = c("De", "En", "Fr", "It", "Vi", "Th", "Zh-CN", "Yue", "Ja", "Sv", "Sr", "Kor")))
View(ent_mi)
mi <- subset(ent_mi, entropy == "Conditional Entropy")
ggplot(mi, aes(x = language, y = MI, fill = model)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black", width = 0.7) +
geom_text(aes(label = round(MI, 2)),
vjust = 0.5,
position = position_dodge(width = 0.7),
size = 3,
angle = 90,
hjust = -0.2) +
labs(x = "Language",
y = expression(bold("Mutual Information") ~ "(nats)"),
fill = "Context types:") +
theme_minimal(base_size = 14) +
scale_fill_manual(values = c("mBERT" = "#1b9e77", "mGPT" = "#d95f02"),
labels = c("mBERT" = "Bidirectional context (mBERT)", "mGPT" = "Past context (mGPT)")) +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, face = "bold"),
axis.title = element_text(face = "bold"),
legend.title = element_text(),
legend.position = "top") +
ylim(0, 4) +
# Annotate regions and text
annotate("rect", xmin = 0.6, xmax = 4.4, ymin = 0, ymax = 3,
fill = NA, color = "#6a5acd", linetype = "dotted", size = 1) +  # Changed to soft purple
annotate("text", x = 2.5, y = 2.5, label = "stress-accent", color = "#6a5acd", size = 4) +
annotate("rect", xmin = 4.6, xmax = 8.4, ymin = 0, ymax = 3,
fill = NA, color = "#4682b4", size = 1) +  # Changed to steel blue
annotate("text", x = 6.5, y = 2.5, label = "tonal-accent", color = "#4682b4", size = 4) +   blue
ggplot(mi, aes(x = language, y = MI, fill = model)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black", width = 0.7) +
geom_text(aes(label = round(MI, 2)),
vjust = 0.5,
position = position_dodge(width = 0.7),
size = 3,
angle = 90,
hjust = -0.2) +
labs(x = "Language",
y = expression(bold("Mutual Information") ~ "(nats)"),
fill = "Context types:") +
theme_minimal(base_size = 14) +
scale_fill_manual(values = c("mBERT" = "#1b9e77", "mGPT" = "#d95f02"),
labels = c("mBERT" = "Bidirectional context (mBERT)", "mGPT" = "Past context (mGPT)")) +
theme(axis.text.x = element_text(angle = 45, hjust = 0.5, face = "bold"),
axis.title = element_text(face = "bold"),
legend.title = element_text(),
legend.position = "top",
# panel.border = element_rect(color = "black", fill = NA, size = 0.5)
) +
ylim(0, 4)
# ggsave(filename = paste0("../visualization/mi_lang", ".pdf"), width = 6, height = 5, dpi=300)
